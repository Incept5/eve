import{_ as X,aq as F,ar as Y,as as _,at as H,l as i,d as V,au as q,av as U,af as $,ak as z,ag as P,ae as K,aw as Q,ax as W,ay as Z}from"./index-C_TEJHsl.js";import{G as B}from"./graph-CTYy6aJ0.js";import{l as I}from"./layout-DCExyVn0.js";import{i as x}from"./_baseUniq-D5lUozPa.js";import{c as L}from"./clone-DcPBhbod.js";import{m as A}from"./_basePickBy-C5kGju8Q.js";function p(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:ee(e),edges:ne(e)};return x(e.graph())||(n.value=L(e.graph())),n}function ee(e){return A(e.nodes(),(function(n){var t=e.node(n),i=e.parent(n),r={v:n};return x(t)||(r.value=t),x(i)||(r.parent=i),r}))}function ne(e){return A(e.edges(),(function(n){var t=e.edge(n),i={v:n.v,w:n.w};return x(n.name)||(i.name=n.name),x(t)||(i.value=t),i}))}var f=new Map,b=new Map,J=new Map,te=X((()=>{b.clear(),J.clear(),f.clear()}),"clear"),O=X(((e,n)=>{const t=b.get(n)||[];return i.trace("In isDescendant",n," ",e," = ",t.includes(e)),t.includes(e)}),"isDescendant"),se=X(((e,n)=>{const t=b.get(n)||[];return i.info("Descendants of ",n," is ",t),i.info("Edge is ",e),e.v!==n&&e.w!==n&&(t?t.includes(e.v)||O(e.v,n)||O(e.w,n)||t.includes(e.w):(i.debug("Tilt, ",n,",not in descendants"),!1))}),"edgeInCluster"),G=X(((e,n,t,r)=>{i.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const a=n.children(e)||[];e!==r&&a.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",a),a.forEach((a=>{if(n.children(a).length>0)G(a,n,t,r);else{const o=n.node(a);i.info("cp ",a," to ",r," with parent ",e),t.setNode(a,o),r!==n.parent(a)&&(i.warn("Setting parent",a,n.parent(a)),t.setParent(a,n.parent(a))),e!==r&&a!==e?(i.debug("Setting parent",a,e),t.setParent(a,e)):(i.info("In copy ",e,"root",r,"data",n.node(e),r),i.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e));const d=n.edges(a);i.debug("Copying Edges",d),d.forEach((a=>{i.info("Edge",a);const o=n.edge(a.v,a.w,a.name);i.info("Edge data",o,r);try{se(a,r)?(i.info("Copying as ",a.v,a.w,o,a.name),t.setEdge(a.v,a.w,o,a.name),i.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))):i.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}catch(e){i.error(e)}}))}i.debug("Removing node",a),n.removeNode(a)}))}),"copy"),R=X(((e,n)=>{const t=n.children(e);let i=[...t];for(const r of t)J.set(r,e),i=[...i,...R(r,n)];return i}),"extractDescendants"),ie=X(((e,n,t)=>{const i=e.edges().filter((e=>e.v===n||e.w===n)),r=e.edges().filter((e=>e.v===t||e.w===t)),a=i.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w}))),o=r.map((e=>({v:e.v,w:e.w})));return a.filter((e=>o.some((n=>e.v===n.v&&e.w===n.w))))}),"findCommonEdges"),D=X(((e,n,t)=>{const r=n.children(e);if(i.trace("Searching children of id ",e,r),r.length<1)return e;let a;for(const e of r){const i=D(e,n,t),r=ie(n,t,i);if(i){if(!(r.length>0))return i;a=i}}return a}),"findNonClusterChild"),k=X((e=>f.has(e)&&f.get(e).externalConnections&&f.has(e)?f.get(e).id:e),"getAnchorId"),re=X(((e,n)=>{if(!e||n>10)i.debug("Opting out, no graph ");else{i.debug("Opting in, graph "),e.nodes().forEach((function(n){e.children(n).length>0&&(i.warn("Cluster identified",n," Replacement id in edges: ",D(n,e,n)),b.set(n,R(n,e)),f.set(n,{id:D(n,e,n),clusterData:e.node(n)}))})),e.nodes().forEach((function(n){const t=e.children(n),r=e.edges();t.length>0?(i.debug("Cluster identified",n,b),r.forEach((e=>{O(e.v,n)^O(e.w,n)&&(i.warn("Edge: ",e," leaves cluster ",n),i.warn("Descendants of XXX ",n,": ",b.get(n)),f.get(n).externalConnections=!0)}))):i.debug("Not a cluster ",n,b)}));for(let n of f.keys()){const t=f.get(n).id,i=e.parent(t);i!==n&&f.has(i)&&!f.get(i).externalConnections&&(f.get(n).id=i)}e.edges().forEach((function(n){const t=e.edge(n);i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v,a=n.w;if(i.warn("Fix XXX",f,"ids:",n.v,n.w,"Translating: ",f.get(n.v)," --- ",f.get(n.w)),f.get(n.v)||f.get(n.w)){if(i.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),r=k(n.v),a=k(n.w),e.removeEdge(n.v,n.w,n.name),r!==n.v){const i=e.parent(r);f.get(i).externalConnections=!0,t.fromCluster=n.v}if(a!==n.w){const i=e.parent(a);f.get(i).externalConnections=!0,t.toCluster=n.w}i.warn("Fix Replacing with XXX",r,a,n.name),e.setEdge(r,a,t,n.name)}})),i.warn("Adjusted Graph",p(e)),T(e,0),i.trace(f)}}),"adjustClustersAndEdges"),T=X(((e,n)=>{var t,r;if(i.warn("extractor - ",n,p(e),e.children("D")),n>10)return void i.error("Bailing out");let a=e.nodes(),o=!1;for(const n of a){const t=e.children(n);o=o||t.length>0}if(o){i.debug("Nodes = ",a,n);for(const o of a)if(i.debug("Extracting node",o,f,f.has(o)&&!f.get(o).externalConnections,!e.parent(o),e.node(o),e.children("D")," Depth ",n),f.has(o))if(!f.get(o).externalConnections&&e.children(o)&&e.children(o).length>0){i.warn("Cluster without external connections, without a parent and with children",o,n);let a="TB"===e.graph().rankdir?"LR":"TB";null!=(r=null==(t=f.get(o))?void 0:t.clusterData)&&r.dir&&(a=f.get(o).clusterData.dir,i.warn("Fixing dir",f.get(o).clusterData.dir,a));const d=new B({multigraph:!0,compound:!0}).setGraph({rankdir:a,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));i.warn("Old graph before copy",p(e)),G(o,e,d,o),e.setNode(o,{clusterNode:!0,id:o,clusterData:f.get(o).clusterData,label:f.get(o).label,graph:d}),i.warn("New graph after copy node: (",o,")",p(d)),i.debug("Old graph after copy",p(e))}else i.warn("Cluster ** ",o," **not meeting the criteria !externalConnections:",!f.get(o).externalConnections," no parent: ",!e.parent(o)," children ",e.children(o)&&e.children(o).length>0,e.children("D"),n),i.debug(f);else i.debug("Not a cluster",o,n);a=e.nodes(),i.warn("New list of nodes",a);for(const t of a){const r=e.node(t);i.warn(" Now next level",t,r),null!=r&&r.clusterNode&&T(r.graph,n+1)}}else i.debug("Done, no node has children",e.nodes())}),"extractor"),M=X(((e,n)=>{if(0===n.length)return[];let t=Object.assign([],n);return n.forEach((n=>{const i=e.children(n),r=M(e,i);t=[...t,...r]})),t}),"sorter"),oe=X((e=>M(e,e.children())),"sortNodesByHierarchy"),j=X((async(e,n,t,r,a,o)=>{i.warn("Graph in recursive render:XAX",p(n),a);const d=n.graph().rankdir;i.trace("Dir in recursive render - dir:",d);const s=e.insert("g").attr("class","root");n.nodes()?i.info("Recursive render XXX",n.nodes()):i.info("No nodes found for",n),n.edges().length>0&&i.info("Recursive edges",n.edge(n.edges()[0]));const c=s.insert("g").attr("class","clusters"),l=s.insert("g").attr("class","edgePaths"),g=s.insert("g").attr("class","edgeLabels"),u=s.insert("g").attr("class","nodes");await Promise.all(n.nodes().map((async function(e){const s=n.node(e);if(void 0!==a){const t=JSON.parse(JSON.stringify(a.clusterData));i.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",a.height),n.setNode(a.id,t),n.parent(e)||(i.trace("Setting parent",e,a.id),n.setParent(e,a.id,t))}if(i.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e))),null!=s&&s.clusterNode){i.info("Cluster identified XBX",e,s.width,n.node(e));const{ranksep:a,nodesep:d}=n.graph();s.graph.setGraph({...s.graph.graph(),ranksep:a+25,nodesep:d});const c=await j(u,s.graph,t,r,n.node(e),o),l=c.elem;q(s,l),s.diff=c.diff||0,i.info("New compound node after recursive render XAX",e,"width",s.width,"height",s.height),U(l,s)}else n.children(e).length>0?(i.trace("Cluster - the non recursive path XBX",e,s.id,s,s.width,"Graph:",n),i.trace(D(s.id,n)),f.set(s.id,{id:D(s.id,n),node:s})):(i.trace("Node - the non recursive path XAX",e,u,n.node(e),d),await $(u,n.node(e),{config:o,dir:d}))}))),await X((async()=>{const e=n.edges().map((async function(e){const t=n.edge(e.v,e.w,e.name);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e)),i.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e))),i.info("Fix",f,"ids:",e.v,e.w,"Translating: ",f.get(e.v),f.get(e.w)),await Z(g,t)}));await Promise.all(e)}),"processEdges")(),i.info("Graph before layout:",JSON.stringify(p(n))),i.info("############################################# XXX"),i.info("###                Layout                 ### XXX"),i.info("############################################# XXX"),I(n),i.info("Graph after layout:",JSON.stringify(p(n)));let h=0,{subGraphTitleTotalMargin:w}=z(o);return await Promise.all(oe(n).map((async function(e){var t;const r=n.node(e);if(i.info("Position XBX => "+e+": ("+r.x,","+r.y,") width: ",r.width," height: ",r.height),null!=r&&r.clusterNode)r.y+=w,i.info("A tainted cluster node XBX1",e,r.id,r.width,r.height,r.x,r.y,n.parent(e)),f.get(r.id).node=r,P(r);else if(n.children(e).length>0){i.info("A pure cluster node XBX1",e,r.id,r.x,r.y,r.width,r.height,n.parent(e)),r.height+=w,n.node(r.parentId);const a=(null==r?void 0:r.padding)/2||0,o=(null==(t=null==r?void 0:r.labelBBox)?void 0:t.height)||0,d=o-a||0;i.debug("OffsetY",d,"labelHeight",o,"halfPadding",a),await K(c,r),f.get(r.id).node=r}else{const e=n.node(r.parentId);r.y+=w/2,i.info("A regular node XBX1 - using the padding",r.id,"parent",r.parentId,r.width,r.height,r.x,r.y,"offsetY",r.offsetY,"parent",e,null==e?void 0:e.offsetY,r),P(r)}}))),n.edges().forEach((function(e){const a=n.edge(e);i.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(a),a),a.points.forEach((e=>e.y+=w/2));const o=n.node(e.v);var d=n.node(e.w);const s=Q(l,a,f,t,o,d,r);W(a,s)})),n.nodes().forEach((function(e){const t=n.node(e);i.info(e,t.type,t.diff),t.isGroup&&(h=t.diff)})),i.warn("Returning from recursive render XAX",s,h),{elem:s,diff:h}}),"recursiveRender"),ge=X((async(e,n)=>{var t,r,a,o,d,s;const c=new B({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:(null==(t=e.config)?void 0:t.nodeSpacing)||(null==(a=null==(r=e.config)?void 0:r.flowchart)?void 0:a.nodeSpacing)||e.nodeSpacing,ranksep:(null==(o=e.config)?void 0:o.rankSpacing)||(null==(s=null==(d=e.config)?void 0:d.flowchart)?void 0:s.rankSpacing)||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}})),l=n.select("g");F(l,e.markers,e.type,e.diagramId),Y(),_(),H(),te(),e.nodes.forEach((e=>{c.setNode(e.id,{...e}),e.parentId&&c.setParent(e.id,e.parentId)})),i.debug("Edges:",e.edges),e.edges.forEach((e=>{if(e.start===e.end){const n=e.start,t=n+"---"+n+"---1",i=n+"---"+n+"---2",r=c.node(n);c.setNode(t,{domId:t,id:t,parentId:r.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),c.setParent(t,r.parentId),c.setNode(i,{domId:i,id:i,parentId:r.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),c.setParent(i,r.parentId);const a=structuredClone(e),o=structuredClone(e),d=structuredClone(e);a.label="",a.arrowTypeEnd="none",a.id=n+"-cyclic-special-1",o.arrowTypeStart="none",o.arrowTypeEnd="none",o.id=n+"-cyclic-special-mid",d.label="",r.isGroup&&(a.fromCluster=n,d.toCluster=n),d.id=n+"-cyclic-special-2",d.arrowTypeStart="none",c.setEdge(n,t,a,n+"-cyclic-special-0"),c.setEdge(t,i,o,n+"-cyclic-special-1"),c.setEdge(i,n,d,n+"-cyc<lic-special-2")}else c.setEdge(e.start,e.end,{...e},e.id)})),i.warn("Graph at first:",JSON.stringify(p(c))),re(c),i.warn("Graph after XAX:",JSON.stringify(p(c)));const g=V();await j(l,c,e.type,e.diagramId,void 0,g)}),"render");export{ge as render};