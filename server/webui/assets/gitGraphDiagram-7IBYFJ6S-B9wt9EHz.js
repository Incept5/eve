import{p as Z}from"./chunk-4BMEZGHF-BhvTljr_.js";import{I as F}from"./chunk-XZIHB7SX-B4496MKO.js";import{C as U,_ as h,d as rr,D as er,E as tr,F as ar,l as w,s as nr,g as sr,b as or,c as cr,n as ir,o as dr,e as B,t as hr,j as lr,u as $r,G as fr}from"./index-Do9-VIGs.js";import{p as gr}from"./radar-MK3ICKWK-BaM2xwLV.js";import"./_baseUniq-oL-2dCeP.js";import"./_basePickBy-BQkB4iYo.js";import"./clone--ywDU1an.js";var x={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yr=U.gitGraph,z=h((()=>er({...yr,...tr().gitGraph})),"getConfig"),i=new F((()=>{const r=z(),t=r.mainBranchName,e=r.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:e}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}}));function j(){return ar({length:7})}function N(r,t){const e=Object.create(null);return r.reduce(((r,o)=>{const n=t(o);return e[n]||(e[n]=!0,r.push(o)),r}),[])}h(j,"getID"),h(N,"uniqBy");var ur=h((function(r){i.records.direction=r}),"setDirection"),xr=h((function(r){w.debug("options str",r),r=(r=null==r?void 0:r.trim())||"{}";try{i.records.options=JSON.parse(r)}catch(r){w.error("error while parsing gitGraph options",r.message)}}),"setOptions"),pr=h((function(){return i.records.options}),"getOptions"),br=h((function(r){let t=r.msg,e=r.id;const o=r.type;let n=r.tags;w.info("commit",t,e,o,n),w.debug("Entering commit:",t,e,o,n);const a=z();e=B.sanitizeText(e,a),t=B.sanitizeText(t,a),n=null==n?void 0:n.map((r=>B.sanitizeText(r,a)));const s={id:e||i.records.seq+"-"+j(),message:t,seq:i.records.seq++,type:o??x.NORMAL,tags:n??[],parents:null==i.records.head?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=s,w.info("main branch",a.mainBranchName),i.records.commits.set(s.id,s),i.records.branches.set(i.records.currBranch,s.id),w.debug("in pushCommit "+s.id)}),"commit"),mr=h((function(r){let t=r.name;const e=r.order;if(t=B.sanitizeText(t,z()),i.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);i.records.branches.set(t,null!=i.records.head?i.records.head.id:null),i.records.branchConfig.set(t,{name:t,order:e}),_(t),w.debug("in createBranch")}),"branch"),wr=h((r=>{let t=r.branch,e=r.id;const o=r.type,n=r.tags,a=z();t=B.sanitizeText(t,a),e&&(e=B.sanitizeText(e,a));const s=i.records.branches.get(i.records.currBranch),c=i.records.branches.get(t),h=s?i.records.commits.get(s):void 0,d=c?i.records.commits.get(c):void 0;if(h&&d&&h.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(i.records.currBranch===t){const r=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},r}if(void 0===h||!h){const r=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},r}if(!i.records.branches.has(t)){const r=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},r}if(void 0===d||!d){const r=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},r}if(h===d){const r=new Error('Incorrect usage of "merge". Both branches have same head');throw r.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},r}if(e&&i.records.commits.has(e)){const r=new Error('Incorrect usage of "merge". Commit with id:'+e+" already exists, use different custom Id");throw r.hash={text:`merge ${t} ${e} ${o} ${null==n?void 0:n.join(" ")}`,token:`merge ${t} ${e} ${o} ${null==n?void 0:n.join(" ")}`,expected:[`merge ${t} ${e}_UNIQUE ${o} ${null==n?void 0:n.join(" ")}`]},r}const m=c||"",$={id:e||`${i.records.seq}-${j()}`,message:`merged branch ${t} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,m],branch:i.records.currBranch,type:x.MERGE,customType:o,customId:!!e,tags:n??[]};i.records.head=$,i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),w.debug(i.records.branches),w.debug("in mergeBranch")}),"merge"),vr=h((function(r){let t=r.id,e=r.targetId,o=r.tags,n=r.parent;w.debug("Entering cherryPick:",t,e,o);const a=z();if(t=B.sanitizeText(t,a),e=B.sanitizeText(e,a),o=null==o?void 0:o.map((r=>B.sanitizeText(r,a))),n=B.sanitizeText(n,a),!t||!i.records.commits.has(t)){const r=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const s=i.records.commits.get(t);if(void 0===s||!s)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(s.parents)||!s.parents.includes(n)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const c=s.branch;if(s.type===x.MERGE&&!n)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!e||!i.records.commits.has(e)){if(c===i.records.currBranch){const r=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const r=i.records.branches.get(i.records.currBranch);if(void 0===r||!r){const r=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const a=i.records.commits.get(r);if(void 0===a||!a){const r=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw r.hash={text:`cherryPick ${t} ${e}`,token:`cherryPick ${t} ${e}`,expected:["cherry-pick abc"]},r}const h={id:i.records.seq+"-"+j(),message:`cherry-picked ${null==s?void 0:s.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:null==i.records.head?[]:[i.records.head.id,s.id],branch:i.records.currBranch,type:x.CHERRY_PICK,tags:o?o.filter(Boolean):[`cherry-pick:${s.id}${s.type===x.MERGE?`|parent:${n}`:""}`]};i.records.head=h,i.records.commits.set(h.id,h),i.records.branches.set(i.records.currBranch,h.id),w.debug(i.records.branches),w.debug("in cherryPick")}}),"cherryPick"),_=h((function(r){if(r=B.sanitizeText(r,z()),!i.records.branches.has(r)){const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${r}")`);throw t.hash={text:`checkout ${r}`,token:`checkout ${r}`,expected:[`branch ${r}`]},t}{i.records.currBranch=r;const t=i.records.branches.get(i.records.currBranch);i.records.head=void 0!==t&&t?i.records.commits.get(t)??null:null}}),"checkout");function A(r,t,e){const o=r.indexOf(t);-1===o?r.push(e):r.splice(o,1,e)}function D(r){const t=r.reduce(((r,t)=>r.seq>t.seq?r:t),r[0]);let e="";r.forEach((function(r){e+=r===t?"\t*":"\t|"}));const o=[e,t.id,t.seq];for(const r in i.records.branches)i.records.branches.get(r)===t.id&&o.push(r);if(w.debug(o.join(" ")),t.parents&&2==t.parents.length&&t.parents[0]&&t.parents[1]){const e=i.records.commits.get(t.parents[0]);A(r,t,e),t.parents[1]&&r.push(i.records.commits.get(t.parents[1]))}else{if(0==t.parents.length)return;if(t.parents[0]){const e=i.records.commits.get(t.parents[0]);A(r,t,e)}}D(r=N(r,(r=>r.id)))}h(A,"upsert"),h(D,"prettyPrintCommitHistory");var Cr=h((function(){w.debug(i.records.commits);D([V()[0]])}),"prettyPrint"),Er=h((function(){i.reset(),hr()}),"clear"),Br=h((function(){return[...i.records.branchConfig.values()].map(((r,t)=>null!==r.order&&void 0!==r.order?r:{...r,order:parseFloat(`0.${t}`)})).sort(((r,t)=>(r.order??0)-(t.order??0))).map((({name:r})=>({name:r})))}),"getBranchesAsObjArray"),kr=h((function(){return i.records.branches}),"getBranches"),Lr=h((function(){return i.records.commits}),"getCommits"),V=h((function(){const r=[...i.records.commits.values()];return r.forEach((function(r){w.debug(r.id)})),r.sort(((r,t)=>r.seq-t.seq)),r}),"getCommitsArray"),Tr=h((function(){return i.records.currBranch}),"getCurrentBranch"),Mr=h((function(){return i.records.direction}),"getDirection"),Rr=h((function(){return i.records.head}),"getHead"),X={commitType:x,getConfig:z,setDirection:ur,setOptions:xr,getOptions:pr,commit:br,branch:mr,merge:wr,cherryPick:vr,checkout:_,prettyPrint:Cr,clear:Er,getBranchesAsObjArray:Br,getBranches:kr,getCommits:Lr,getCommitsArray:V,getCurrentBranch:Tr,getDirection:Mr,getHead:Rr,setAccTitle:nr,getAccTitle:sr,getAccDescription:or,setAccDescription:cr,setDiagramTitle:ir,getDiagramTitle:dr},Ir=h(((r,t)=>{Z(r,t),r.dir&&t.setDirection(r.dir);for(const e of r.statements)qr(e,t)}),"populate"),qr=h(((r,t)=>{const e={Commit:h((r=>t.commit(Or(r))),"Commit"),Branch:h((r=>t.branch(zr(r))),"Branch"),Merge:h((r=>t.merge(Gr(r))),"Merge"),Checkout:h((r=>t.checkout(Hr(r))),"Checkout"),CherryPicking:h((r=>t.cherryPick(Pr(r))),"CherryPicking")}[r.$type];e?e(r):w.error(`Unknown statement type: ${r.$type}`)}),"parseStatement"),Or=h((r=>({id:r.id,msg:r.message??"",type:void 0!==r.type?x[r.type]:x.NORMAL,tags:r.tags??void 0})),"parseCommit"),zr=h((r=>({name:r.name,order:r.order??0})),"parseBranch"),Gr=h((r=>({branch:r.branch,id:r.id??"",type:void 0!==r.type?x[r.type]:void 0,tags:r.tags??void 0})),"parseMerge"),Hr=h((r=>r.branch),"parseCheckout"),Pr=h((r=>{var t;return{id:r.id,targetId:"",tags:0===(null==(t=r.tags)?void 0:t.length)?void 0:r.tags,parent:r.parent}}),"parseCherryPicking"),Wr={parse:h((async r=>{const t=await gr("gitGraph",r);w.debug(t),Ir(t,X)}),"parse")},S=rr(),b=null==S?void 0:S.gitGraph,R=10,I=40,k=4,L=2,O=8,C=new Map,E=new Map,P=30,G=new Map,W=[],M=0,u="LR",jr=h((()=>{C.clear(),E.clear(),G.clear(),M=0,W=[],u="LR"}),"clear"),J=h((r=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof r?r.split(/\\n|\n|<br\s*\/?>/gi):r).forEach((r=>{const e=document.createElementNS("http://www.w3.org/2000/svg","tspan");e.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),e.setAttribute("dy","1em"),e.setAttribute("x","0"),e.setAttribute("class","row"),e.textContent=r.trim(),t.appendChild(e)})),t}),"drawText"),Q=h((r=>{let t,e,o;return"BT"===u?(e=h(((r,t)=>r<=t),"comparisonFunc"),o=1/0):(e=h(((r,t)=>r>=t),"comparisonFunc"),o=0),r.forEach((r=>{var n,i;const a="TB"===u||"BT"==u?null==(n=E.get(r))?void 0:n.y:null==(i=E.get(r))?void 0:i.x;void 0!==a&&e(a,o)&&(t=r,o=a)})),t}),"findClosestParent"),Sr=h((r=>{let t="",e=1/0;return r.forEach((r=>{const o=E.get(r).y;o<=e&&(t=r,e=o)})),t||void 0}),"findClosestParentBT"),Ar=h(((r,t,e)=>{let o=e,n=e;const i=[];r.forEach((r=>{const e=t.get(r);if(!e)throw new Error(`Commit not found for key ${r}`);e.parents.length?(o=Yr(e),n=Math.max(o,n)):i.push(e),Kr(e,o)})),o=n,i.forEach((r=>{Nr(r,o,e)})),r.forEach((r=>{const e=t.get(r);if(null!=e&&e.parents.length){const r=Sr(e.parents);o=E.get(r).y-I,o<=n&&(n=o);const t=C.get(e.branch).pos,i=o-R;E.set(e.id,{x:t,y:i})}}))}),"setParallelBTPos"),Dr=h((r=>{var t;const e=Q(r.parents.filter((r=>null!==r)));if(!e)throw new Error(`Closest parent not found for commit ${r.id}`);const o=null==(t=E.get(e))?void 0:t.y;if(void 0===o)throw new Error(`Closest parent position not found for commit ${r.id}`);return o}),"findClosestParentPos"),Yr=h((r=>Dr(r)+I),"calculateCommitPosition"),Kr=h(((r,t)=>{const e=C.get(r.branch);if(!e)throw new Error(`Branch not found for commit ${r.id}`);const o=e.pos,n=t+R;return E.set(r.id,{x:o,y:n}),{x:o,y:n}}),"setCommitPosition"),Nr=h(((r,t,e)=>{const o=C.get(r.branch);if(!o)throw new Error(`Branch not found for commit ${r.id}`);const n=t+e,i=o.pos;E.set(r.id,{x:i,y:n})}),"setRootPosition"),_r=h(((r,t,e,o,n,i)=>{if(i===x.HIGHLIGHT)r.append("rect").attr("x",e.x-10).attr("y",e.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${n%O} ${o}-outer`),r.append("rect").attr("x",e.x-6).attr("y",e.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${n%O} ${o}-inner`);else if(i===x.CHERRY_PICK)r.append("circle").attr("cx",e.x).attr("cy",e.y).attr("r",10).attr("class",`commit ${t.id} ${o}`),r.append("circle").attr("cx",e.x-3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${o}`),r.append("circle").attr("cx",e.x+3).attr("cy",e.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${o}`),r.append("line").attr("x1",e.x+3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${o}`),r.append("line").attr("x1",e.x-3).attr("y1",e.y+1).attr("x2",e.x).attr("y2",e.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${o}`);else{const a=r.append("circle");if(a.attr("cx",e.x),a.attr("cy",e.y),a.attr("r",t.type===x.MERGE?9:10),a.attr("class",`commit ${t.id} commit${n%O}`),i===x.MERGE){const i=r.append("circle");i.attr("cx",e.x),i.attr("cy",e.y),i.attr("r",6),i.attr("class",`commit ${o} ${t.id} commit${n%O}`)}i===x.REVERSE&&r.append("path").attr("d",`M ${e.x-5},${e.y-5}L${e.x+5},${e.y+5}M${e.x-5},${e.y+5}L${e.x+5},${e.y-5}`).attr("class",`commit ${o} ${t.id} commit${n%O}`)}}),"drawCommitBullet"),Vr=h(((r,t,e,o)=>{var n;if(t.type!==x.CHERRY_PICK&&(t.customId&&t.type===x.MERGE||t.type!==x.MERGE)&&null!=b&&b.showCommitLabel){const i=r.append("g"),a=i.insert("rect").attr("class","commit-label-bkg"),s=i.append("text").attr("x",o).attr("y",e.y+25).attr("class","commit-label").text(t.id),c=null==(n=s.node())?void 0:n.getBBox();if(c&&(a.attr("x",e.posWithOffset-c.width/2-L).attr("y",e.y+13.5).attr("width",c.width+2*L).attr("height",c.height+2*L),"TB"===u||"BT"===u?(a.attr("x",e.x-(c.width+4*k+5)).attr("y",e.y-12),s.attr("x",e.x-(c.width+4*k)).attr("y",e.y+c.height-12)):s.attr("x",e.posWithOffset-c.width/2),b.rotateCommitLabel))if("TB"===u||"BT"===u)s.attr("transform","rotate(-45, "+e.x+", "+e.y+")"),a.attr("transform","rotate(-45, "+e.x+", "+e.y+")");else{const r=-7.5-(c.width+10)/25*9.5,t=10+c.width/25*8.5;i.attr("transform","translate("+r+", "+t+") rotate(-45, "+o+", "+e.y+")")}}}),"drawCommitLabel"),Xr=h(((r,t,e,o)=>{var n;if(t.tags.length>0){let i=0,a=0,s=0;const c=[];for(const o of t.tags.reverse()){const t=r.insert("polygon"),h=r.append("circle"),d=r.append("text").attr("y",e.y-16-i).attr("class","tag-label").text(o),m=null==(n=d.node())?void 0:n.getBBox();if(!m)throw new Error("Tag bbox not found");a=Math.max(a,m.width),s=Math.max(s,m.height),d.attr("x",e.posWithOffset-m.width/2),c.push({tag:d,hole:h,rect:t,yOffset:i}),i+=20}for(const{tag:r,hole:t,rect:n,yOffset:i}of c){const c=s/2,h=e.y-19.2-i;if(n.attr("class","tag-label-bkg").attr("points",`\n      ${o-a/2-k/2},${h+L}  \n      ${o-a/2-k/2},${h-L}\n      ${e.posWithOffset-a/2-k},${h-c-L}\n      ${e.posWithOffset+a/2+k},${h-c-L}\n      ${e.posWithOffset+a/2+k},${h+c+L}\n      ${e.posWithOffset-a/2-k},${h+c+L}`),t.attr("cy",h).attr("cx",o-a/2+k/2).attr("r",1.5).attr("class","tag-hole"),"TB"===u||"BT"===u){const s=o+i;n.attr("class","tag-label-bkg").attr("points",`\n        ${e.x},${s+2}\n        ${e.x},${s-2}\n        ${e.x+R},${s-c-2}\n        ${e.x+R+a+4},${s-c-2}\n        ${e.x+R+a+4},${s+c+2}\n        ${e.x+R},${s+c+2}`).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),t.attr("cx",e.x+k/2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+e.x+","+o+")"),r.attr("x",e.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+e.x+","+o+")")}}}}),"drawCommitTags"),Jr=h((r=>{switch(r.customType??r.type){case x.NORMAL:return"commit-normal";case x.REVERSE:return"commit-reverse";case x.HIGHLIGHT:return"commit-highlight";case x.MERGE:return"commit-merge";case x.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),Qr=h(((r,t,e,o)=>{const n={x:0,y:0};if(!(r.parents.length>0))return"TB"===t?P:"BT"===t?(o.get(r.id)??n).y-I:0;{const e=Q(r.parents);if(e){const i=o.get(e)??n;return"TB"===t?i.y+I:"BT"===t?(o.get(r.id)??n).y-I:i.x+I}}return 0}),"calculatePosition"),Zr=h(((r,t,e)=>{var o,n;const i="BT"===u&&e?t:t+R,a="TB"===u||"BT"===u?i:null==(o=C.get(r.branch))?void 0:o.pos,s="TB"===u||"BT"===u?null==(n=C.get(r.branch))?void 0:n.pos:i;if(void 0===s||void 0===a)throw new Error(`Position were undefined for commit ${r.id}`);return{x:s,y:a,posWithOffset:i}}),"getCommitPosition"),K=h(((r,t,e)=>{if(!b)throw new Error("GitGraph config not found");const o=r.append("g").attr("class","commit-bullets"),n=r.append("g").attr("class","commit-labels");let i="TB"===u||"BT"===u?P:0;const a=[...t.keys()],s=(null==b?void 0:b.parallelCommits)??!1,c=h(((r,e)=>{var o,n;const i=null==(o=t.get(r))?void 0:o.seq,a=null==(n=t.get(e))?void 0:n.seq;return void 0!==i&&void 0!==a?i-a:0}),"sortKeys");let d=a.sort(c);"BT"===u&&(s&&Ar(d,t,i),d=d.reverse()),d.forEach((r=>{var a;const c=t.get(r);if(!c)throw new Error(`Commit not found for key ${r}`);s&&(i=Qr(c,u,i,E));const h=Zr(c,i,s);if(e){const r=Jr(c),t=c.customType??c.type,e=(null==(a=C.get(c.branch))?void 0:a.index)??0;_r(o,c,h,r,e,t),Vr(n,c,h,i),Xr(n,c,h,i)}"TB"===u||"BT"===u?E.set(c.id,{x:h.x,y:h.posWithOffset}):E.set(c.id,{x:h.posWithOffset,y:h.y}),i="BT"===u&&s?i+I:i+I+R,i>M&&(M=i)}))}),"drawCommits"),Fr=h(((r,t,e,o,n)=>{const i=("TB"===u||"BT"===u?e.x<o.x:e.y<o.y)?t.branch:r.branch,a=h((r=>r.branch===i),"isOnBranchToGetCurve"),s=h((e=>e.seq>r.seq&&e.seq<t.seq),"isBetweenCommits");return[...n.values()].some((r=>s(r)&&a(r)))}),"shouldRerouteArrow"),H=h(((r,t,e=0)=>{const o=r+Math.abs(r-t)/2;if(e>5)return o;if(W.every((r=>Math.abs(r-o)>=10)))return W.push(o),o;const n=Math.abs(r-t);return H(r,t-n/5,e+1)}),"findLane"),Ur=h(((r,t,e,o)=>{var n,i,a,s,c;const h=E.get(t.id),d=E.get(e.id);if(void 0===h||void 0===d)throw new Error(`Commit positions not found for commits ${t.id} and ${e.id}`);const m=Fr(t,e,h,d,o);let $,l="",y="",g=0,p=0,f=null==(n=C.get(e.branch))?void 0:n.index;if(e.type===x.MERGE&&t.id!==e.parents[0]&&(f=null==(i=C.get(t.branch))?void 0:i.index),m){l="A 10 10, 0, 0, 0,",y="A 10 10, 0, 0, 1,",g=10,p=10;const r=h.y<d.y?H(h.y,d.y):H(d.y,h.y),e=h.x<d.x?H(h.x,d.x):H(d.x,h.x);"TB"===u?h.x<d.x?$=`M ${h.x} ${h.y} L ${e-g} ${h.y} ${y} ${e} ${h.y+p} L ${e} ${d.y-g} ${l} ${e+p} ${d.y} L ${d.x} ${d.y}`:(f=null==(a=C.get(t.branch))?void 0:a.index,$=`M ${h.x} ${h.y} L ${e+g} ${h.y} ${l} ${e} ${h.y+p} L ${e} ${d.y-g} ${y} ${e-p} ${d.y} L ${d.x} ${d.y}`):"BT"===u?h.x<d.x?$=`M ${h.x} ${h.y} L ${e-g} ${h.y} ${l} ${e} ${h.y-p} L ${e} ${d.y+g} ${y} ${e+p} ${d.y} L ${d.x} ${d.y}`:(f=null==(s=C.get(t.branch))?void 0:s.index,$=`M ${h.x} ${h.y} L ${e+g} ${h.y} ${y} ${e} ${h.y-p} L ${e} ${d.y+g} ${l} ${e-p} ${d.y} L ${d.x} ${d.y}`):h.y<d.y?$=`M ${h.x} ${h.y} L ${h.x} ${r-g} ${l} ${h.x+p} ${r} L ${d.x-g} ${r} ${y} ${d.x} ${r+p} L ${d.x} ${d.y}`:(f=null==(c=C.get(t.branch))?void 0:c.index,$=`M ${h.x} ${h.y} L ${h.x} ${r+g} ${y} ${h.x+p} ${r} L ${d.x-g} ${r} ${l} ${d.x} ${r-p} L ${d.x} ${d.y}`)}else l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,"TB"===u?(h.x<d.x&&($=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${d.y-g} ${l} ${h.x+p} ${d.y} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${d.x-g} ${h.y} ${y} ${d.x} ${h.y+p} L ${d.x} ${d.y}`),h.x>d.x&&(l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,$=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${d.y-g} ${y} ${h.x-p} ${d.y} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${d.x+g} ${h.y} ${l} ${d.x} ${h.y+p} L ${d.x} ${d.y}`),h.x===d.x&&($=`M ${h.x} ${h.y} L ${d.x} ${d.y}`)):"BT"===u?(h.x<d.x&&($=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${d.y+g} ${y} ${h.x+p} ${d.y} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${d.x-g} ${h.y} ${l} ${d.x} ${h.y-p} L ${d.x} ${d.y}`),h.x>d.x&&(l="A 20 20, 0, 0, 0,",y="A 20 20, 0, 0, 1,",g=20,p=20,$=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${h.x} ${d.y+g} ${l} ${h.x-p} ${d.y} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${d.x-g} ${h.y} ${l} ${d.x} ${h.y-p} L ${d.x} ${d.y}`),h.x===d.x&&($=`M ${h.x} ${h.y} L ${d.x} ${d.y}`)):(h.y<d.y&&($=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${d.x-g} ${h.y} ${y} ${d.x} ${h.y+p} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${h.x} ${d.y-g} ${l} ${h.x+p} ${d.y} L ${d.x} ${d.y}`),h.y>d.y&&($=e.type===x.MERGE&&t.id!==e.parents[0]?`M ${h.x} ${h.y} L ${d.x-g} ${h.y} ${l} ${d.x} ${h.y-p} L ${d.x} ${d.y}`:`M ${h.x} ${h.y} L ${h.x} ${d.y+g} ${y} ${h.x+p} ${d.y} L ${d.x} ${d.y}`),h.y===d.y&&($=`M ${h.x} ${h.y} L ${d.x} ${d.y}`));if(void 0===$)throw new Error("Line definition not found");r.append("path").attr("d",$).attr("class","arrow arrow"+f%O)}),"drawArrow"),re=h(((r,t)=>{const e=r.append("g").attr("class","commit-arrows");[...t.keys()].forEach((r=>{const o=t.get(r);o.parents&&o.parents.length>0&&o.parents.forEach((r=>{Ur(e,t.get(r),o,t)}))}))}),"drawArrows"),ee=h(((r,t)=>{const e=r.append("g");t.forEach(((r,t)=>{var o;const n=t%O,i=null==(o=C.get(r.name))?void 0:o.pos;if(void 0===i)throw new Error(`Position not found for branch ${r.name}`);const a=e.append("line");a.attr("x1",0),a.attr("y1",i),a.attr("x2",M),a.attr("y2",i),a.attr("class","branch branch"+n),"TB"===u?(a.attr("y1",P),a.attr("x1",i),a.attr("y2",M),a.attr("x2",i)):"BT"===u&&(a.attr("y1",M),a.attr("x1",i),a.attr("y2",P),a.attr("x2",i)),W.push(i);const s=r.name,c=J(s),h=e.insert("rect"),d=e.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);d.node().appendChild(c);const m=c.getBBox();h.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(!0===(null==b?void 0:b.rotateCommitLabel)?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),d.attr("transform","translate("+(-m.width-14-(!0===(null==b?void 0:b.rotateCommitLabel)?30:0))+", "+(i-m.height/2-1)+")"),"TB"===u?(h.attr("x",i-m.width/2-10).attr("y",0),d.attr("transform","translate("+(i-m.width/2-5)+", 0)")):"BT"===u?(h.attr("x",i-m.width/2-10).attr("y",M),d.attr("transform","translate("+(i-m.width/2-5)+", "+M+")")):h.attr("transform","translate(-19, "+(i-m.height/2)+")")}))}),"drawBranches"),te=h((function(r,t,e,o,n){return C.set(r,{pos:t,index:e}),t+=50+(n?40:0)+("TB"===u||"BT"===u?o.width/2:0)}),"setBranchPosition"),ae=h((function(r,t,e,o){if(jr(),w.debug("in gitgraph renderer",r+"\n","id:",t,e),!b)throw new Error("GitGraph config not found");const n=b.rotateCommitLabel??!1,i=o.db;G=i.getCommits();const a=i.getBranchesAsObjArray();u=i.getDirection();const s=lr(`[id="${t}"]`);let c=0;a.forEach(((r,t)=>{var e;const o=J(r.name),i=s.append("g"),a=i.insert("g").attr("class","branchLabel"),h=a.insert("g").attr("class","label branch-label");null==(e=h.node())||e.appendChild(o);const d=o.getBBox();c=te(r.name,c,t,d,n),h.remove(),a.remove(),i.remove()})),K(s,G,!1),b.showBranches&&ee(s,a),re(s,G),K(s,G,!0),$r.insertTitle(s,"gitTitleText",b.titleTopMargin??0,i.getDiagramTitle()),fr(void 0,s,b.diagramPadding,b.useMaxWidth)}),"draw"),ne={draw:ae},se=h((r=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((t=>`\n        .branch-label${t} { fill: ${r["gitBranchLabel"+t]}; }\n        .commit${t} { stroke: ${r["git"+t]}; fill: ${r["git"+t]}; }\n        .commit-highlight${t} { stroke: ${r["gitInv"+t]}; fill: ${r["gitInv"+t]}; }\n        .label${t}  { fill: ${r["git"+t]}; }\n        .arrow${t} { stroke: ${r["git"+t]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${r.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelColor};}\n  .commit-label-bkg { font-size: ${r.commitLabelFontSize}; fill: ${r.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${r.tagLabelFontSize}; fill: ${r.tagLabelColor};}\n  .tag-label-bkg { fill: ${r.tagLabelBackground}; stroke: ${r.tagLabelBorder}; }\n  .tag-hole { fill: ${r.textColor}; }\n\n  .commit-merge {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${r.primaryColor};\n    fill: ${r.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${r.textColor};\n  }\n`),"getStyles"),oe=se,ge={parser:Wr,db:X,renderer:ne,styles:oe};export{ge as diagram};